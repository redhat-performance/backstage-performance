global:
  clusterRouterBase: ${OPENSHIFT_APP_DOMAIN}
  imagePullSecrets:
    - rhdh-pull-secret
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
        disabled: false
route:
  enabled: true
  host: "{{ .Values.global.host }}"
  path: /
  tls:
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  wildcardPolicy: None
upstream:
  backstage:
    appConfig:
      app:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          connection:
            password: "${POSTGRESQL_ADMIN_PASSWORD}"
            user: postgres
        auth:
          externalAccess:
            - type: legacy
              options:
                secret: ${BACKEND_SECRET}
                subject: legacy-catalog
    args:
      - "--config"
      - app-config.yaml
      - "--config"
      - app-config.example.yaml
      - "--config"
      - app-config.example.production.yaml
    command:
      - node
      - packages/backend
    containerPorts:
      backend: 7007
    extraAppConfig:
      - configMapRef: app-config-rhdh
        filename: app-config.rhdh.yaml
    extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: "{{ .Release.Name }}-postgresql"
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            key: github.token
            name: "{{ .Release.Name }}-plugin-secrets"
      - name: KEYCLOAK_BASE_URL
        value: "https://keycloak-${RHDH_NAMESPACE}.${OPENSHIFT_APP_DOMAIN}/auth"
      - name: KEYCLOAK_LOGIN_REALM
        value: "backstage"
      - name: KEYCLOAK_REALM
        value: "backstage"
      - name: CLIENT_ID
        valueFrom:
          secretKeyRef:
            key: CLIENT_ID
            name: keycloak-client-secret-backstage
      - name: CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: CLIENT_SECRET
            name: keycloak-client-secret-backstage
      - name: LOG_LEVEL
        value: "warn"
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: "0"
    image:
      debug: false
      pullPolicy: Always
      registry: ${RHDH_IMAGE_REGISTRY}
      repository: ${RHDH_IMAGE_REPO}
      tag: ${RHDH_IMAGE_TAG}
    installDir: /app
    replicas: ${RHDH_DEPLOYMENT_REPLICAS}
    revisionHistoryLimit: 10
  clusterDomain: cluster.local
  diagnosticMode:
    args:
      - infinity
    command:
      - sleep
    enabled: false
  ingress:
    enabled: false
    host: "{{ .Values.global.host }}"
    tls:
      enabled: false
  metrics:
    serviceMonitor:
      enabled: false
      path: /metrics
  nameOverride: developer-hub
  networkPolicy:
    enabled: false
  postgresql:
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
        replicationPasswordKey: replication-password
    enabled: true
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-15
      tag: latest
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    primary:
      containerSecurityContext:
        enabled: false
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: "{{ .Release.Name }}-postgresql"
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
        size: "${RHDH_DB_STORAGE}"
      podSecurityContext:
        enabled: false
      securityContext:
        enabled: false
    architecture: replication
    replication:
      synchronousCommit: "on"
      numSynchronousReplicas: ${RHDH_DB_REPLICAS}
      applicationName: "${RHDH_HELM_RELEASE_NAME}"
    readReplicas:
      containerSecurityContext:
        enabled: false
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: replication-password
              name: "{{ .Release.Name }}-postgresql"
      podSecurityContext:
        enabled: false
      replicaCount: ${RHDH_DB_REPLICAS}
      securityContext:
        enabled: false
  service:
    externalTrafficPolicy: Cluster
    ports:
      backend: 7007
      name: http-backend
      targetPort: backend
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    automountServiceAccountToken: true
    create: false
